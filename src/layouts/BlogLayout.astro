---
import LinkButton from '@components/LinkButton';
import TagItem from '@components/TagItem.astro';
import MainLayout from "./MainLayout.astro";

export interface Heading {
  depth: number;
  slug: string;
  text: string;
}

const { content, headings } = Astro.props;
const heading1 = headings.filter((heading:Heading)=>{
  return heading.depth === 1;
})
---

<MainLayout title={`${content.title} | KyoyaDev Blog`} description={content.excerpt}>
  <div class="mx-auto max-w-2xl lg:max-w-4xl">
    <div class="space-y-5">
      <h1 class="text-2xl lg:text-3xl text-center">{content.title}</h1>
      <div class="flex flex-col items-center justify-center space-y-3 lg:space-y-0 lg:space-x-10 lg:flex-row">
        <p class="">公開日：{content.date}</p>
        {content.lastmod ? <p>修正日：{content.lastmod}</p> : null}
      </div>
      <ul class="flex justify-center flex-wrap gap-3">
        {content.tags.map((tag:string)=>{
          return <TagItem tag={tag} />
        })}
      </ul>

      <details>
        <summary class="cursor-pointer">目次</summary>
        <ul class="bg-primary text-soft-white dark:bg-soft-white dark:text-secondary mt-1 p-3 space-y-3 list-disc list-inside">
          {heading1.map((heading:Heading)=>{
            return <li><a class="hover:underline" href={`#${heading.slug}`}>{heading.text}</a></li>
          })}
        </ul>
      </details>

    </div>
    <div class="mt-10 prose max-w-none dark:prose-invert prose-h1:text-2xl prose-h2:text-xl prose-h1:border-b-4 prose-h1:border-sky-700 dark:prose-h1:border-sky-500 prose-h1:max-w-fit md:prose-p:text-lg md:prose-p:leading-relaxed lg:prose-h2:text-2xl lg:prose-h1:text-3xl lg:prose-p:text-xl lg:prose-p:leading-relaxed lg:prose-code:text-lg">
      <slot />
    </div>
    <div class="mt-10 max-w-sm mx-auto">
      <LinkButton href="/">一覧ページへ</LinkButton>
    </div>
  </div>
</MainLayout>

<style is:inline>
  .custom-block {
    border-radius: 5px;
    margin: 1.5rem 0;
  }
  .custom-block > .custom-block-body {
    position: relative;
    padding: 5px 15px 5px 40px;
    border-radius: 6px;
  }
  .dark .custom-block > .custom-block-body p {
    color: #272727;
  }
  .info > .custom-block-body {
    background: #FEF6E4;
  }
  .dark .info > .custom-block-body {
    background: #ffb84c;
  }
  .warn > .custom-block-body {
    background: #FEEFF2;
  }
  .dark .warn > .custom-block-body {
    background: #FF7670;
  }
  .question > .custom-block-body {
    background: #DBF8DD;
  }
  .dark .question > .custom-block-body {
    background: #40bd68;
  }

  .custom-block > .custom-block-body::before {
    position: absolute;
    left: 15px;
    top: 50%;
    transform: translateY(-50%);
    display: block;
    width: 20px;
    height: 20px;
    line-height: 20px;
    font-size: 1em;
    text-align: center;
    font-weight: 700;
    border-radius: 50%;
  }
  .info > .custom-block-body::before {
    content: "!";
    color: #fff;
    background: #ffb84c;
  }
  .dark .info > .custom-block-body::before{
    background: #FEF6E4;
    color: #713f12;
  }
  .warn > .custom-block-body::before {
    content: "!!";
    color: #dddcda;
    background: #FF7670;
  }
  .dark .warn > .custom-block-body::before{
    background: #FEEFF2;
    color: #272727;
  }
  .question > .custom-block-body::before {
    content: "?";
    color: #dddcda;
    background: #04C441;
  }
  .dark .question > .custom-block-body::before{
    background: #FEEFF2;
    color: #272727;
  }
</style>

<script is:inline>
  const links = document.querySelectorAll('a');
  const externalLinks = Array.from(links).filter(link => link.host !== window.location.host);
  externalLinks.forEach(link => {
    if(!link.target){
      link.target = '_blank';
    }
  });
</script>
